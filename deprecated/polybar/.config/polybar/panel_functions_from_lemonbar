#!/bin/sh

# Panel functions
# icons: $(printf '%b' "\ue01f")

source $(dirname $0)/panel_config

spotify(){
    STATUS=$(playerctl status)
    if [ "$STATUS" == "Playing" ]; then
        echo "%{F#FF$GREEN_COLOR T2 A:playerctl play-pause: A3:playerctl stop:}$(printf '%b' "\uf1bc")%{F- T-} $(playerctl metadata xesam:artist) - $(playerctl metadata xesam:title)%{A A}"
    elif [ "$STATUS" == "Paused" ]; then
        echo "%{F#FF$YELLOW_COLOR T2 A:playerctl play-pause: A3:playerctl stop:}$(printf '%b' "\uf1bc")%{F- T-} $(playerctl metadata xesam:artist) - $(playerctl metadata xesam:title)%{A A}"
    else echo "%{F#FF$RED_COLOR}$(printf '%b' "\uf1bc")%{F-} Spotify OFF"
    fi
}

wifi_ssid(){
    NAME=$(iw wlp3s0 link | grep SSID | cut -d' ' -f2)
    if [ "$NAME" == "" ]; then
        echo "%{F#FF$RED_COLOR T2}$(printf '%b' "\uf1eb") no conn%{F T-}"
    else echo "%{F#FF$WHITE_COLOR T2}$(printf '%b' "\uf1eb") %{F T-}$NAME"
    fi
}

transmission() {
    ACTIVETORR=$(transmission-remote -l | egrep '(Downloading|Up & Down)' | wc -l)
    echo "%{F#FF$WHITE_COLOR}dl %{F}$ACTIVETORR"
}

check_htpc() {
    IS_RUNNING=$(curl -Is dnevna.local:32400 | head -1 | cut -d " " -f 3)
    if [ "$IS_RUNNING" == "" ]; then
        echo "%{F#FF$WHITE_COLOR}htpc %{F}OFF"
    else echo "%{F#FF$WHITE_COLOR}htpc %{F}ON"
    fi
}

diskspace() {
    SPACE_AVAIL=$(df -h $1 | tail -1 | sed 's/ \+ / /g' | cut -d " " -f 4)
    DISK_NAME=$(df -h $1 | tail -1 | cut -d " " -f 1 | cut -d "/" -f 4)
    echo "%{F#FF$WHITE_COLOR}$DISK_NAME %{F}$SPACE_AVAIL"
}

syncthing() {
    SYNC_STATUS=$(systemctl --user status syncthing | grep active | cut -d: -f 2 | cut -d " " -f 2)
    echo "%{F#FF$WHITE_COLOR}$(printf '%b' "\uf021") %{F}$SYNC_STATUS"
}

trola(){
    SCHEDULE=$($HOME/.bin/trola)
    echo "%{F#FF$WHITE_COLOR}$(printf '%b' "\uf207") %{F}$SCHEDULE"
}

datetime_right() {
    echo "%{F#FF$WHITE_COLOR}$(printf '%b' "\uf073")%{F} $(date +'%d.%m.%Y') $SEP %{F#FF$WHITE_COLOR}$(printf '%b' "\uf017")%{F} $(date +'%H:%M') %{B F-}"
}

datetime_left() {
    echo "%{F#FF$WHITE_COLOR}$(printf '%b' "\uf073")%{F} $(date +'%d.%m.%Y') $SEP %{F#FF$WHITE_COLOR}$(printf '%b' "\uf017")%{F} $(date +'%H:%M')%{B F-}"
}

temperature() {
    CPU_TEMP=$(sensors | grep "Core 0" | cut -d+ -f2 | cut -d. -f1)
    echo "%{F#FF$WHITE_COLOR}$(printf '%b' "\uf06d") %{F}$CPU_TEMPÂ°C"
}

load_avg() {
    AVGLOAD=$(cut -d " " -f 1-3 /proc/loadavg)
    echo "%{F#FF$WHITE_COLOR}$(printf '%b' "\uf0e4") %{F}$AVGLOAD"
}

mpd(){
    STATUS=$(mpc current)
    if [ "$STATUS" != "" ]; then
        DONE_PERCENTAGE=$(expr $(mpc | grep playing | cut -d "(" -f 2 | sed 's/%)//g') / 10)
        TEN_PERC="$(printf '%b' "\ub7")"
        PROGRESS_BAR=""
        for (( i = 0; i < 10; i++ )); do
            MPC_SKIP=$(expr $i*10)
            if [ $i -lt $DONE_PERCENTAGE ]; then
                PROGRESS_BAR="$PROGRESS_BAR$TEN_PERC"
            else PROGRESS_BAR="$PROGRESS_BAR%{F#FF$WHITE_COLOR}$TEN_PERC%{F-}"
            fi
        done
        echo "%{F#FF$WHITE_COLOR A:mpc toggle: A3:mpc stop:}$(printf '%b' "\u266a") %{F}$STATUS%{A A} $PROGRESS_BAR"
    else echo ""
    fi
}

volume(){
    VOLUME=$(pulseaudio-ctl full-status | awk '{split($0, array, " ")} END{print array[1]}')
    MUTE=$(pulseaudio-ctl full-status | awk '{split($0, array, " ")} END{print array[2]}')
    if [ "$MUTE" == "yes" ]; then
        echo "%{F#FF$RED_COLOR A:pulseaudio-ctl mute:}$(printf '%b' "\uf028") $VOLUME%%{A F-}"
    else echo "%{F#FF$WHITE_COLOR A:pulseaudio-ctl mute:}$(printf '%b' "\uf028") %{F}$VOLUME%%{A}"
    fi
}

hue_lights(){
    STATUS1=$(hue lights 1 | cut -d' ' -f5)
    STATUS2=$(hue lights 2 | cut -d' ' -f5)
    LIGHTS_ICON_ON=$(printf '%b' "\uf0eb")
    LIGHTS_ICON_OFF=$(printf '%b' "\uf0eb")


    if [ "$STATUS1" == "on" ]; then
        LIGHT1="%{F#FF$YELLOW_COLOR A:hue lights 1 off: A3:hue lights 1 -50:}$LIGHTS_ICON_ON%{A A F-}"
    else LIGHT1="%{F#FF$WHITE_COLOR A:hue lights 1 on:}$LIGHTS_ICON_OFF%{A F-}"
    fi

    if [ "$STATUS2" == "on" ]; then
        LIGHT2="%{F#FF$YELLOW_COLOR A:hue lights 2 off: A3:hue lights 2 -50:}$LIGHTS_ICON_ON%{A A F-}"
    else LIGHT2="%{F#FF$WHITE_COLOR A:hue lights 2 on: A3:hue lights 2 -50:}$LIGHTS_ICON_OFF%{A A F-}"
    fi

    echo "$LIGHT1 $LIGHT2"
}

battery(){
    CAPACITY=$(cat /sys/class/power_supply/BAT0/capacity)
    if [ $CAPACITY -lt 20 ]; then
        echo "%{F#FF$RED_COLOR T2}$(printf '%b' "\uf241") $CAPACITY%%{F T-}"
    else echo "%{F#FF$WHITE_COLOR T2}$(printf '%b' "\uf241") %{F T-}$CAPACITY%"
    fi
}

vpn(){
    STATUS=$(ip address | grep vpn | head -1 | cut -d',' -f4)
    if [ "$STATUS" == "UP" ]; then
        echo "%{F#FF$GREEN_COLOR T2}$(printf '%b' "\uf023") VPN%{F T-}"
    else echo "%{F#FF$RED_COLOR T2}$(printf '%b' "\uf09c") VPN%{F T-}"
    fi
}

todo(){
    TODO_FILE="$HOME/Nextcloud/Notes/todo.txt"
    TODO_ITEMS=$(grep -c "^\[\ ]" $TODO_FILE)

    echo "%{F#FF$WHITE_COLOR A:code $TODO_FILE:}$(printf '%b' "\uf0ca") %{F}$TODO_ITEMS items%{A}"
}

bitcoin(){
    BC_JSON=$(curl -s 'https://www.bitstamp.net/api/v2/ticker/btceur/' | jq -r '.last')

    echo "%{F#FF$WHITE_COLOR}$(printf '%b' "\uf15a") %{F}$BC_JSON"
}

worklog(){
    WORKLOG=$(watson status)

    echo "%{F#FF$WHITE_COLOR}$(printf '%b' "\uf0ad") %{F}$WORKLOG"
}